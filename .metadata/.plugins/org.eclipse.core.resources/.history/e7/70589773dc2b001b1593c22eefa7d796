/*
 *	(C) Copyright 2020. All rights reserved.
 *	@author duyntps09687
 *	@date Nov 18, 2020
 */
package com.fpoly.server.api;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fpoly.server.exception.BadRequestException;
import com.fpoly.server.exception.notfoundexception.SanPhamNotFoundException;
import com.fpoly.server.request.dto.SanPhamRequest;
import com.fpoly.server.response.dto.SanPhamResponse;
import com.fpoly.server.service.SanPhamService;

@RestController
@RequestMapping("/api/sanpham")
public class SanPhamAPI {
	
	@Autowired
	private SanPhamService service;
	
	@GetMapping("/{idSanPham}")
	public ResponseEntity<?> findOneIsActived(@PathVariable("idSanPham") String idSanPham,
			@RequestParam(value = "cuahang", required = true) String idCuaHang) {
		try {
			SanPhamResponse response = service.findOne(idSanPham, idCuaHang, 1);
			if (null != response )
				return ResponseEntity.ok(response);
			else 
				throw new SanPhamNotFoundException("SanPhamResponse not found exception");	
		} catch (SanPhamNotFoundException ex) {
			throw new SanPhamNotFoundException("SanPhamResponse not found exception");
		}
	}
	
	@GetMapping("/find")
	public ResponseEntity<?> findByMaVach(@RequestParam(value = "mavach", required = true) String maVach,
			@RequestParam(value = "cuahang", required = true) String idCuaHang) {
		try {
			SanPhamResponse response = service.findByMaVach(maVach, idCuaHang, 1);
			if (null != response )
				return ResponseEntity.ok(response);
			else 
				throw new SanPhamNotFoundException("SanPhamResponse not found exception");	
		} catch (SanPhamNotFoundException ex) {
			throw new SanPhamNotFoundException("SanPhamResponse not found exception");
		}
	}
	
	@GetMapping("/find")
	public ResponseEntity<?> findByNhomHang(@RequestParam(value = "nhomhang", required = true) Integer idNhomHang,
			@RequestParam(value = "cuahang", required = true) String idCuaHang) {
		try {
			List<SanPhamResponse> response = service.findByNhomHang(idNhomHang, idCuaHang, 1);
			if (null != response )
				return ResponseEntity.ok(response);
			else 
				throw new SanPhamNotFoundException("SanPhamResponse not found exception");	
		} catch (SanPhamNotFoundException ex) {
			throw new SanPhamNotFoundException("SanPhamResponse not found exception");
		}
	}
	
	@PostMapping("/{idSanPham}")
	public ResponseEntity<?> updateOne(@RequestBody SanPhamRequest sanPhamRequest,
			@RequestParam(value = "cuahang", required = true) String idCuaHang) {
		try {
			SanPhamResponse response = service.update(sanPhamRequest);
			return ResponseEntity.ok(response);
		} catch (BadRequestException ex) {
			throw new BadRequestException("Bad request exception");
		}
	}

}
